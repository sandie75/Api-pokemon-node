
// On indique Ã  Node d'aller chercher la dependance express dans le dossier node.module.
const express = require('express')

let pokemons = require('./mock-pokemon')
//On crÃ©e une instance d'un application express grÃ¢ce Ã  la mÃ©thode express.
const app = express()
//On dÃ©finit une simple constante avec la valeur 3000. C'est le port sur lequel nous allons dÃ©marrer notre api rest.
const port = 3000
/*On dÃ©finit notre premier point de terminaison ou endpoint. C'est le coeur d'express. 
Pour dÃ©finir un point de terminaison:
mÃ©thode de la requÃªte: "get" qui prend 2 Ã©lÃ©ments en paramÃ¨tre: le chemin de la requÃªte (ici c'est simplement un slash, c'est Ã  dire la route par dÃ©faut de notre api). Le 2Ã¨ argument est une fonction dont le rÃ´le est de fournir une rÃ©ponse au client lorsque notre point de terminaison est appelÃ©. Cette fct a elle-mÃªme deux argument en entrÃ©e: req et res.
req: permet de rÃ©cupÃ©rer un objet request qui correspond Ã  la requÃªte reÃ§ue en entrÃ©e de notre point de terminaison. Et res: la response, c Ã  dire l'objet que l'on doit renvoyer depuis express Ã  notre client. Ici, on utilise la mÃ©thode send de l'objet response pour retourner le message "Hello express" au client */

app.get('/', (req,res)=> res.send('Hello again, Express ! ğŸ‘‹'))

//On dÃ©marre l'api rest sur le port 3000 et on affiche un message de confirmation dans le port de commande grÃ¢ce Ã  la mÃ©thode listen fournie par express.

//une api rest qui retourne les pokemons:
app.get('/api/pokemons/:id',(req,res) => { 
    //on rÃ©cupÃ¨re l'identifiant contenu dans l'url et on l'ajoute dans la route au dessus.
    const id = req.params.id
    const pokemon = pokemons.find(pokemon => pokemon.id === id)
    res.send(`Vous avez demandÃ© le pokemon nÂ°${id}`)
})

app.listen(port, () => console.log(`Notre application node est dÃ©marrÃ©e sur : http://localhost:${port}`))

//il ne reste plus qu'Ã  dÃ©marrer l'api rest avec la commande "npm run start".
//On vient d'envoyer une requÃªte Get Ã  notre api rest grÃ¢ce au navigateur, et notre api rest Ã©crite en node a retournÃ© une rÃ©ponse.
// Si on change le message dans le code, il ne se passe rien sur la page. Pour rafraichir la page, il faudrait couper la commande npm start en faisant ctrl c, puis relancer npm start. Pour Ã©viter de devoir relancer la commande sans arrÃªt pour rafraichir la page, il faut charger le package nodemon.
//rq: si on n'a qu'une ligne de code, pas besoin d'accolades, mais s'il y en a plusieurs, il faut les ajouter.

//la mÃ©thode find, pour rÃ©cupÃ©rer un pokemon en fonction d'une certaine condition. Dans notre cas, on cherche le pokemon qui a le mÃªme identifiant que celui issu de l'url, soit: pokemon.id === id